SINGLY LINKED LISTS STEPS

-a singly linked list is made in Javascript with 2 constructors.
-To do something to the list, someone will invoke the methods of the
SinglyList prototype. Through prototypical inheritance, this means
the instances of that constructor, MySinglyList for example, can contain
methods like MySinglyList.add or MySinglyList search.
-When SinglyList methods are called, they can pass arguments. These arguments
can be used by the SinglyList method to create Nodes.
-Nodes are what packageup the data stored in the list, and with a
SinglyLinked list, they also are meant to contain a reference variable
pointing to the next node.
-Because Nodes are created when data is added to the list, and because
Nodes always need to store a reference variable, they are created inside the
Singly linked methods with an instance of a Node constructor. So
when you call a SinglyList method, a "new Node" can take a value and reference
for the next node in the chain, or null if it is at the SinglyList's "head".
-With a SinglyList, you must traverse through each Node in order to find
any specific data stored in a given Node.


PUSH METHOD

-a push method can be added by assigning a function to the SinglyList.prototype
-so, SinglyList.prototype.push
-If the PUSH method is called, it should naturally be called with some data
to be added to the list. This means it will be defined with an argument value.
-SinglyList.prototype.push = function(val){...};
-When push is called with a value, we are trying to store a new piece of
data in the list, but we need to also provide it with a reference pointer.
-The 'head' (this.head), of the SinglyList refers to the last data added
to the list, so a newly pushed piece of data should be given 'null' for
it's reference. If the reference point on a given piece of data is 'null',
it means it is the last in the list.
-If the reference contains a value instead of 'null', that means you need
to continue traversing the Nodes until you get to one that has 'null'
